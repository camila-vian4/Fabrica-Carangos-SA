import operacional    
import estoque as estoque_modulo  
import financeiro      
import recursos_humanos     

def voltarMenu(): # Fun√ß√£o para voltar ao menu principal ou continuar no m√≥dulo atual
    while True:
        print("\nDeseja continuar ou voltar ao menu principal? üîÑüè†")
        print("\n1. Continuar nesse m√≥dulo")
        print("2. Voltar ao menu principal")
        opcao_menu = input("\nSelecione a op√ß√£o desejada: ").lower()

        if opcao_menu in ["1", "continuar", "c"]:
            return "continuar"  # Retorna para continuar no m√≥dulo atual
        elif opcao_menu in ["2", "voltar", "v", "menu principal"]:
            return "voltar"     # Retorna para o menu principal
        else:
            print("\nOp√ß√£o inv√°lida. Tente novamente. ‚ùå")

producao_semana = None # Vari√°vel para armazenar a produ√ß√£o da semana
agua = luz = salarios = impostos = None # Vari√°veis para armazenar as despesas fixas
estoque = estoque_modulo.Estoque() # Instancia o m√≥dulo de estoque

print("\n\n")
print("--- F√°brica Carangos S/A üöó‚ú®")
print("Seja bem-vindo(a) ao nosso sistema! ü§ñüõ†Ô∏è")

while True: # Loop principal do sistema

    print("\n\nüè† > MENU PRINCIPAL:\n")
    print("1 - M√≥dulo Operacional üìã")
    print("2 - M√≥dulo de Estoque üì¶")
    print("3 - M√≥dulo Financeiro üí∏")
    print("4 - M√≥dulo de Recursos Humanos üë•")
    print("5 - Sair ‚ùå")
    opcao = input("\n‚û°Ô∏è  Escolha uma op√ß√£o: ")

    # Inicializa as vari√°veis necess√°rias
    if opcao == "5":
        print("\nAgradecemos por utilizar nosso sistema! At√© logo! üëã")
        exit() # Encerra o programa
    elif opcao not in ["1", "2", "3", "4"]:
        print("\nOp√ß√£o inv√°lida. Tente novamente. ‚ùå")
        continue # Volta ao in√≠cio do loop principal

    match opcao: # Estrutura de sele√ß√£o para os m√≥dulos principais

        case "1":
            while True:
                # M√≥dulo Operacional
                print("\n\n--- M√ìDULO OPERACIONAL | üìã‚ú®")
                print("\n1. Cadastro de Produ√ß√£o üöó")
                print("2. Simula√ß√£o de Produ√ß√£o üìà")
                print("3. Proje√ß√£o de Produ√ß√£o üìÖ")
                print("4. Relat√≥rio de Produ√ß√£o üìä")
                print("5. Sair ‚ùå")
                opcao_operacional = input("\n‚û°Ô∏è  Escolha uma op√ß√£o: ")

                if opcao_operacional == "5": # Op√ß√£o para sair do m√≥dulo operacional
                    print("\nAgradecemos por utilizar nosso sistema! At√© logo! üëã")
                    exit()
                elif opcao_operacional not in ["1", "2", "3", "4", "5"]: # Verifica se a op√ß√£o √© v√°lida
                    print("\nOp√ß√£o inv√°lida. Tente novamente. ‚ùå")

                # Chamando as op√ß√µes do m√≥dulo operacional
                match opcao_operacional:

                    case "1":
                        print("\n\n--- CADASTRO DE PRODU√á√ÉO | üè≠") 
                        producao_semana = operacional.cadastrar_producao() # Chama a fun√ß√£o para cadastrar a produ√ß√£o
                        resposta = voltarMenu() # Pergunta se deseja voltar ao menu principal ou continuar
                        if resposta == "voltar": # Se a resposta for voltar, sai do loop
                            break

                    case "2":
                        print("\n\n--- SIMULA√á√ÉO DE PRODU√á√ÉO | üìà")
                        if producao_semana is None: # Verifica se a produ√ß√£o foi cadastrada
                            print("\nNenhum cadastro encontrado! Cadastre antes de simular. ‚ö†Ô∏è")
                        else:
                            # Calcula totais e simula proje√ß√µes mensais e anuais
                            total_geral, media_dia, media_turno, total_turno = operacional.calcular_totais(producao_semana)
                            producao_mensal, producao_anual = operacional.simular_projecoes(total_geral)
                            print(f"\nProdu√ß√£o mensal estimada: {producao_mensal} unidades")
                            print(f"Produ√ß√£o anual estimada: {producao_anual} unidades")
                        resposta = voltarMenu()
                        if resposta == "voltar":
                            break

                    case "3":
                        print("\n\n--- PROJE√á√ÉO DE SIMULA√á√ÉO | üìÖ")
                        if producao_semana is None: # Verifica se a produ√ß√£o foi cadastrada
                            print("\nNenhum cadastro encontrado! Cadastre antes de emitir o relat√≥rio. ‚ö†Ô∏è") 
                        else:
                            # Calcula capacidade ideal mensal e anual
                            capacidade_mensal_ideal, capacidade_anual_ideal = operacional.calcular_producao_ideal() # Chama a fun√ß√£o para calcular a capacidade ideal
                            print(f"\nProdu√ß√£o mensal ideal: {capacidade_mensal_ideal} unidades")
                            print(f"Produ√ß√£o anual ideal: {capacidade_anual_ideal} unidades")
                        resposta = voltarMenu()
                        if resposta == "voltar":
                            break

                    case "4":
                        print("\n\n--- RELAT√ìRIO DE PRODU√á√ÉO | üìä\n")
                        if producao_semana is None:
                            print("\nNenhum cadastro encontrado! Cadastre antes de emitir o relat√≥rio. ‚ö†Ô∏è")
                        else:
                            operacional.emitir_relatorio(producao_semana) # Emite o relat√≥rio de produ√ß√£o
                        resposta = voltarMenu()
                        if resposta == "voltar":
                            break

        case "2":
            while True:
                # M√≥dulo de Estoque
                print("\n\n--- M√ìDULO DE ESTOQUE | üì¶‚ú®")
                print("\n1. Cadastrar Carro üöó")
                print("2. Vender Carro üè∑Ô∏è")
                print("3. Mostrar Estoque üìã")
                print("4. Calcular Custos üí∞")
                print("5. Buscar Carro üîç")
                print("6. Sair ‚ùå")
                opcao_estoque = input("\n‚û°Ô∏è  Escolha uma op√ß√£o: ")
                if opcao_estoque == "6":
                    print("\nAgradecemos por utilizar nosso sistema! At√© logo! üëã")
                    exit()
                elif opcao_estoque not in ["1", "2", "3", "4", "5", "6"]:
                    print("\nOp√ß√£o inv√°lida. Tente novamente. ‚ùå")

                # Chamando as op√ß√µes do m√≥dulo de estoque
                match opcao_estoque:
                    case "1":
                        print("\n\n--- CADASTRO DE CARRO | üöó\n")
                        # Coleta dados do carro a ser cadastrado
                        codigo = input("C√≥digo: ")
                        nome = input("Nome: ")
                        data_fabricacao = input("Data de fabrica√ß√£o: ")
                        fornecedor = input("Fornecedor: ")
                        cor = input("Cor: ")

                        try: # Try para capturar erros de entrada
                            quantidade = int(input("Quantidade: "))
                            valor_compra = float(input("Valor de compra: "))
                        except ValueError: # except para tratar entradas inv√°lidas
                            print("Valores inv√°lidos! ‚ùå")
                            break

                        # Cria novo carro e adiciona ao estoque
                        novo_carro = estoque_modulo.Carro(codigo, nome, data_fabricacao, fornecedor, quantidade, valor_compra, cor) # Instancia um novo carro
                        estoque.adicionar_carro(novo_carro) # Adiciona o carro ao estoque
                        resposta = voltarMenu()
                        if resposta == "voltar":
                            break

                    case "2":
                        print("\n\n--- VENDA DE CARRO | üè∑Ô∏è\n")
                        estoque.venda_veiculo() # Realiza a venda de um ve√≠culo
                        resposta = voltarMenu() # Pergunta se deseja voltar ao menu principal ou continuar
                        if resposta == "voltar":
                            break

                    case "3":
                        print("\n\n--- MOSTRAR ESTOQUE | üìã\n")
                        estoque.mostrar_estoque() # Mostra todos os carros em estoque
                        resposta = voltarMenu() # Pergunta se deseja voltar ao menu principal ou continuar
                        if resposta == "voltar":
                            break

                    case "4":
                        print("\n\n--- C√ÅLCULO DE CUSTOS | üí∞")
                        estoque.calcular_custos() # Calcula custos do estoque
                        resposta = voltarMenu() # Pergunta se deseja voltar ao menu principal ou continuar
                        if resposta == "voltar":
                            break

                    case "5":
                        print("\n\n--- BUSCAR CARRO | üîç\n")
                        estoque.buscar_carro() # Busca um carro pelo c√≥digo ou nome
                        resposta = voltarMenu() 
                        if resposta == "voltar":
                            break

        case "3":
            while True:
                # M√≥dulo Financeiro
                print("\n\n--- M√ìDULO FINANCEIRO | üí∏‚ú®")
                print("\n1. Despesas fixas üßæ")
                print("2. Custo por carro üöó")
                print("3. Pre√ßo de venda (50% do lucro) üí∞")
                print("4. Relat√≥rio financeiro üìä")
                print("5. Sair ‚ùå")
                opcao_financeiro = input("\n‚û°Ô∏è  Escolha uma op√ß√£o: ")
                if opcao_financeiro == "5":
                    print("\nAgradecemos por utilizar nosso sistema! At√© logo! üëã")
                    exit()
                elif opcao_financeiro not in ["1", "2", "3", "4", "5"]:
                    print("\nOp√ß√£o inv√°lida. Tente novamente. ‚ùå")

                # Chamando as op√ß√µes do m√≥dulo financeiro
                match opcao_financeiro:

                    case "1":
                        print("\n\n--- DESPESAS FIXAS | üßæ\n")
                        # Coleta dados das despesas fixas
                        agua, luz, salarios, impostos = financeiro.dados_financeiros() # Chama a fun√ß√£o para coletar os dados financeiros
                        custo_total = financeiro.calcular_custo_total(agua, luz, salarios, impostos) # Calcula o custo total
                        print(f"\nCusto total das despesas fixas: R$ {custo_total:.2f}") # Exibe o custo total
                        resposta = voltarMenu()
                        if resposta == "voltar":
                            break

                    case "2":
                        print("\n\n--- CUSTO POR CARRO | üöó")
                        if producao_semana is None: # Verifica se a produ√ß√£o foi cadastrada
                            print("\nNenhum cadastro encontrado! Cadastre antes de calcular o custo por carro. ‚ö†Ô∏è") # Exibe mensagem de erro
                        elif None in [agua, luz, salarios, impostos]: # Verifica se as despesas fixas foram cadastradas
                            print("\nVoc√™ precisa cadastrar as despesas fixas antes! ‚ùå")
                        else:
                            total_produzido = sum(turno for dia in producao_semana.values() for turno in dia.values()) # Calcula o total produzido na semana
                            custo_total = financeiro.calcular_custo_total(agua, luz, salarios, impostos) # Calcula o custo total
                            custo_por_carro = financeiro.calcular_custo_por_carro(custo_total, total_produzido) # Calcula o custo por carro
                            print(f"\nCusto por carro produzido: R$ {custo_por_carro:.2f}")
                        resposta = voltarMenu()
                        if resposta == "voltar":
                            break

                    case "3":
                        print("\n\n--- PRE√áO DE VENDA | üí∞\n")
                        if None in [agua, luz, salarios, impostos]: # Verifica se as despesas fixas foram cadastradas
                            print("\nCadastre as despesas fixas primeiro! ‚ö†Ô∏è")
                        elif producao_semana is None: # Verifica se a produ√ß√£o foi cadastrada
                            print("\nCadastre a produ√ß√£o primeiro! ‚ö†Ô∏è")
                        else:
                            total_produzido = sum(turno for dia in producao_semana.values() for turno in dia.values()) # Calcula o total produzido na semana
                            custo_total = financeiro.calcular_custo_total(agua, luz, salarios, impostos) # Calcula o custo total
                            custo_por_carro = financeiro.calcular_custo_por_carro(custo_total, total_produzido) # Calcula o custo por carro
                            preco_venda = financeiro.calcular_preco_venda(custo_por_carro) # Calcula o pre√ßo de venda com 50% de lucro
                            print(f"\nPre√ßo de venda sugerido (50% de lucro): R$ {preco_venda:.2f}")
                        resposta = voltarMenu()
                        if resposta == "voltar":
                            break

                    case "4":
                        print("\n\n--- RELAT√ìRIO FINANCEIRO | üìä\n")
                        if producao_semana is None:
                            print("\nNenhum cadastro encontrado! Cadastre antes de emitir o relat√≥rio financeiro. ‚ö†Ô∏è")
                        elif None in [agua, luz, salarios, impostos]: # Verifica se as despesas fixas foram cadastradas
                            print("\nCadastre as despesas fixas primeiro! ‚ö†Ô∏è")
                        else:
                            total_produzido = sum(turno for dia in producao_semana.values() for turno in dia.values()) # Calcula o total produzido na semana
                            financeiro.relatorio_financeiro(total_produzido, agua, luz, salarios, impostos) # Gera o relat√≥rio financeiro
                            resposta = voltarMenu()
                            if resposta == "voltar":
                                break
        case "4":
            while True:
                # M√≥dulo Recursos Humanos
                print("\n\n--- M√ìDULO RECURSOS HUMANOS | üë•‚ú®")
                print("\n1. Cadastrar Funcion√°rio üìù")
                print("2. Calcular Sal√°rio üí∞")
                print("3. Gerar Relat√≥rio Final üìä")
                print("4. Sair ‚ùå")
                opcao_rh = input("\n‚û°Ô∏è  Escolha uma op√ß√£o: ")
                if opcao_rh == "4":
                    print("\nAgradecemos por utilizar nosso sistema! At√© logo! üëã")
                    exit()
                elif opcao_rh not in ["1", "2", "3", "4"]: # Verifica se a op√ß√£o √© v√°lida
                    print("\nOp√ß√£o inv√°lida. Tente novamente. ‚ùå")

                # Chamando as op√ß√µes do m√≥dulo de recursos humanos
                match opcao_rh:
                    case "1":
                        print("\n\n--- CADASTRO DE FUNCION√ÅRIO | üìù\n")
                        recursos_humanos.cadastrar_funcionario() # Chama a fun√ß√£o para cadastrar um novo funcion√°rio
                        resposta = voltarMenu()
                        if resposta == "voltar":
                            break

                    case "2":
                        print("\n\n--- C√ÅLCULO DE SAL√ÅRIO | üí∞\n")
                        recursos_humanos.calcular_salario() # Chama a fun√ß√£o para calcular o sal√°rio de um funcion√°rio
                        resposta = voltarMenu()
                        if resposta == "voltar":
                            break

                    case "3":
                        print("\n\n--- RELAT√ìRIO FINAL | üìä\n")
                        recursos_humanos.gerar_relatorio() # Gera o relat√≥rio final com todos os funcion√°rios cadastrados
                        resposta = voltarMenu()
                        if resposta == "voltar":
                            break
                      